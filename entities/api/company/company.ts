/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * Loan API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { CompanyCreateDto } from '../../const'

import { customInstance } from '../../../shared/lib/axios/customAxios'
import type { ErrorType, BodyType } from '../../../shared/lib/axios/customAxios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const companyControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/company`, method: 'GET', signal },
    options
  )
}

export const getCompanyControllerFindAllQueryKey = () => {
  return [`/company`] as const
}

export const getCompanyControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof companyControllerFindAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getCompanyControllerFindAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof companyControllerFindAll>>
  > = ({ signal }) => companyControllerFindAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof companyControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompanyControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerFindAll>>
>
export type CompanyControllerFindAllQueryError = ErrorType<unknown>

export function useCompanyControllerFindAll<
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof companyControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCompanyControllerFindAll<
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof companyControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCompanyControllerFindAll<
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useCompanyControllerFindAll<
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCompanyControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const companyControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/company/${id}`, method: 'GET', signal },
    options
  )
}

export const getCompanyControllerFindOneQueryKey = (id: string) => {
  return [`/company/${id}`] as const
}

export const getCompanyControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getCompanyControllerFindOneQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof companyControllerFindOne>>
  > = ({ signal }) => companyControllerFindOne(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof companyControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompanyControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerFindOne>>
>
export type CompanyControllerFindOneQueryError = ErrorType<unknown>

export function useCompanyControllerFindOne<
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof companyControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCompanyControllerFindOne<
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof companyControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCompanyControllerFindOne<
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useCompanyControllerFindOne<
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCompanyControllerFindOneQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const companyControllerUpdate = (
  id: string,
  companyCreateDto: BodyType<CompanyCreateDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/company/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: companyCreateDto,
    },
    options
  )
}

export const getCompanyControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof companyControllerUpdate>>,
    TError,
    { id: string; data: BodyType<CompanyCreateDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof companyControllerUpdate>>,
  TError,
  { id: string; data: BodyType<CompanyCreateDto> },
  TContext
> => {
  const mutationKey = ['companyControllerUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof companyControllerUpdate>>,
    { id: string; data: BodyType<CompanyCreateDto> }
  > = props => {
    const { id, data } = props ?? {}

    return companyControllerUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CompanyControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerUpdate>>
>
export type CompanyControllerUpdateMutationBody = BodyType<CompanyCreateDto>
export type CompanyControllerUpdateMutationError = ErrorType<unknown>

export const useCompanyControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof companyControllerUpdate>>,
      TError,
      { id: string; data: BodyType<CompanyCreateDto> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof companyControllerUpdate>>,
  TError,
  { id: string; data: BodyType<CompanyCreateDto> },
  TContext
> => {
  const mutationOptions = getCompanyControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
