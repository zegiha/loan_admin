/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * Loan API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  AdvertiseControllerFindAllofMyAdsParams,
  CreateAdvertisementDto,
  UpdateAdvertisementDto,
} from '../../const'

import { customInstance } from '../../../shared/lib/axios/customAxios'
import type { ErrorType, BodyType } from '../../../shared/lib/axios/customAxios'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Create advertisement
 */
export const advertiseControllerCreate = (
  createAdvertisementDto: BodyType<CreateAdvertisementDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/ads`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAdvertisementDto,
      signal,
    },
    options
  )
}

export const getAdvertiseControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerCreate>>,
    TError,
    { data: BodyType<CreateAdvertisementDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerCreate>>,
  TError,
  { data: BodyType<CreateAdvertisementDto> },
  TContext
> => {
  const mutationKey = ['advertiseControllerCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerCreate>>,
    { data: BodyType<CreateAdvertisementDto> }
  > = props => {
    const { data } = props ?? {}

    return advertiseControllerCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerCreate>>
>
export type AdvertiseControllerCreateMutationBody =
  BodyType<CreateAdvertisementDto>
export type AdvertiseControllerCreateMutationError = ErrorType<unknown>

/**
 * @summary Create advertisement
 */
export const useAdvertiseControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerCreate>>,
      TError,
      { data: BodyType<CreateAdvertisementDto> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerCreate>>,
  TError,
  { data: BodyType<CreateAdvertisementDto> },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/ads/all`, method: 'GET', signal },
    options
  )
}

export const getAdvertiseControllerFindAllQueryKey = () => {
  return [`/ads/all`] as const
}

export const getAdvertiseControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof advertiseControllerFindAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAdvertiseControllerFindAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAll>>
  > = ({ signal }) => advertiseControllerFindAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdvertiseControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAll>>
>
export type AdvertiseControllerFindAllQueryError = ErrorType<unknown>

export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdvertiseControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const advertiseControllerFindAllofMyAds = (
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/ads/my`, method: 'GET', params, signal },
    options
  )
}

export const getAdvertiseControllerFindAllofMyAdsQueryKey = (
  params: AdvertiseControllerFindAllofMyAdsParams
) => {
  return [`/ads/my`, ...(params ? [params] : [])] as const
}

export const getAdvertiseControllerFindAllofMyAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<unknown>,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindAllofMyAdsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
  > = ({ signal }) =>
    advertiseControllerFindAllofMyAds(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdvertiseControllerFindAllofMyAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
>
export type AdvertiseControllerFindAllofMyAdsQueryError = ErrorType<unknown>

export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<unknown>,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<unknown>,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<unknown>,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = ErrorType<unknown>,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdvertiseControllerFindAllofMyAdsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const advertiseControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/ads/id/${id}`, method: 'GET', signal },
    options
  )
}

export const getAdvertiseControllerFindOneQueryKey = (id: string) => {
  return [`/ads/id/${id}`] as const
}

export const getAdvertiseControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAdvertiseControllerFindOneQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindOne>>
  > = ({ signal }) => advertiseControllerFindOne(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdvertiseControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindOne>>
>
export type AdvertiseControllerFindOneQueryError = ErrorType<unknown>

export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdvertiseControllerFindOneQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const advertiseControllerFindRandom = (
  count: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/ads/random/${count}`, method: 'GET', signal },
    options
  )
}

export const getAdvertiseControllerFindRandomQueryKey = (count: string) => {
  return [`/ads/random/${count}`] as const
}

export const getAdvertiseControllerFindRandomQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<unknown>,
>(
  count: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAdvertiseControllerFindRandomQueryKey(count)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindRandom>>
  > = ({ signal }) =>
    advertiseControllerFindRandom(count, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!count,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdvertiseControllerFindRandomQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindRandom>>
>
export type AdvertiseControllerFindRandomQueryError = ErrorType<unknown>

export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<unknown>,
>(
  count: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<unknown>,
>(
  count: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<unknown>,
>(
  count: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = ErrorType<unknown>,
>(
  count: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdvertiseControllerFindRandomQueryOptions(
    count,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const advertiseControllerExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/extend/date/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerExtendMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerExtend>>
>

export type AdvertiseControllerExtendMutationError = ErrorType<unknown>

export const useAdvertiseControllerExtend = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerExtendCount = (
  id: string,
  count: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/extend/count/${id}/${count}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerExtendCountMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
    TError,
    { id: string; count: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
  TError,
  { id: string; count: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerExtendCount']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
    { id: string; count: string }
  > = props => {
    const { id, count } = props ?? {}

    return advertiseControllerExtendCount(id, count, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerExtendCountMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerExtendCount>>
>

export type AdvertiseControllerExtendCountMutationError = ErrorType<unknown>

export const useAdvertiseControllerExtendCount = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
      TError,
      { id: string; count: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
  TError,
  { id: string; count: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerExtendCountMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/ads/${id}`, method: 'DELETE' }, options)
}

export const getAdvertiseControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRemove>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRemove']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRemove>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRemove(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRemove>>
>

export type AdvertiseControllerRemoveMutationError = ErrorType<unknown>

export const useAdvertiseControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRemove>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerRemoveMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerApprove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/approve/registration/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerApproveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApprove>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApprove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerApprove']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApprove>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerApprove(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApprove>>
>

export type AdvertiseControllerApproveMutationError = ErrorType<unknown>

export const useAdvertiseControllerApprove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApprove>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApprove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerApproveMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerReject = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/reject/registration/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRejectMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerReject>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerReject>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerReject']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerReject>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerReject(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerReject>>
>

export type AdvertiseControllerRejectMutationError = ErrorType<unknown>

export const useAdvertiseControllerReject = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerReject>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerReject>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerRejectMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Request date extension approval for advertisement
 */
export const advertiseControllerRequestDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/request-date-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRequestDateExtendMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRequestDateExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRequestDateExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRequestDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>
>

export type AdvertiseControllerRequestDateExtendMutationError =
  ErrorType<unknown>

/**
 * @summary Request date extension approval for advertisement
 */
export const useAdvertiseControllerRequestDateExtend = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestDateExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Request count extension approval for advertisement
 */
export const advertiseControllerRequestCountExtend = (
  id: string,
  count: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/request-count-extend/${id}/${count}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRequestCountExtendMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
    TError,
    { id: string; count: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
  TError,
  { id: string; count: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRequestCountExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
    { id: string; count: string }
  > = props => {
    const { id, count } = props ?? {}

    return advertiseControllerRequestCountExtend(id, count, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRequestCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>
>

export type AdvertiseControllerRequestCountExtendMutationError =
  ErrorType<unknown>

/**
 * @summary Request count extension approval for advertisement
 */
export const useAdvertiseControllerRequestCountExtend = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
      TError,
      { id: string; count: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
  TError,
  { id: string; count: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestCountExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerApproveDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/approve-date-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerApproveDateExtendMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerApproveDateExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerApproveDateExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerApproveDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>
>

export type AdvertiseControllerApproveDateExtendMutationError =
  ErrorType<unknown>

export const useAdvertiseControllerApproveDateExtend = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveDateExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerApproveCountExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/approve-count-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerApproveCountExtendMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerApproveCountExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerApproveCountExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerApproveCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>
>

export type AdvertiseControllerApproveCountExtendMutationError =
  ErrorType<unknown>

export const useAdvertiseControllerApproveCountExtend = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveCountExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerRejectDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/reject-date-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRejectDateExtendMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRejectDateExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRejectDateExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRejectDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>
>

export type AdvertiseControllerRejectDateExtendMutationError =
  ErrorType<unknown>

export const useAdvertiseControllerRejectDateExtend = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectDateExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerRejectCountExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/reject-count-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRejectCountExtendMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRejectCountExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRejectCountExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRejectCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>
>

export type AdvertiseControllerRejectCountExtendMutationError =
  ErrorType<unknown>

export const useAdvertiseControllerRejectCountExtend = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectCountExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Request update approval for advertisement
 */
export const advertiseControllerRequestUpdate = (
  id: string,
  updateAdvertisementDto: BodyType<UpdateAdvertisementDto>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/ads/request-update/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateAdvertisementDto,
    },
    options
  )
}

export const getAdvertiseControllerRequestUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
    TError,
    { id: string; data: BodyType<UpdateAdvertisementDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAdvertisementDto> },
  TContext
> => {
  const mutationKey = ['advertiseControllerRequestUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
    { id: string; data: BodyType<UpdateAdvertisementDto> }
  > = props => {
    const { id, data } = props ?? {}

    return advertiseControllerRequestUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRequestUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>
>
export type AdvertiseControllerRequestUpdateMutationBody =
  BodyType<UpdateAdvertisementDto>
export type AdvertiseControllerRequestUpdateMutationError = ErrorType<unknown>

/**
 * @summary Request update approval for advertisement
 */
export const useAdvertiseControllerRequestUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
      TError,
      { id: string; data: BodyType<UpdateAdvertisementDto> },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
  TError,
  { id: string; data: BodyType<UpdateAdvertisementDto> },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerApproveUpdate = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/approve-update/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerApproveUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerApproveUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerApproveUpdate(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerApproveUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>
>

export type AdvertiseControllerApproveUpdateMutationError = ErrorType<unknown>

export const useAdvertiseControllerApproveUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
export const advertiseControllerRejectUpdate = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/reject-update/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRejectUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRejectUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRejectUpdate(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRejectUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>
>

export type AdvertiseControllerRejectUpdateMutationError = ErrorType<unknown>

export const useAdvertiseControllerRejectUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
