/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Loan API
 * Loan API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  AdminAccountCreateDto,
  AdminLoginDto,
  AdvertiseControllerFindAllofMyAdsParams,
  CompanyCreateDto,
  CreateAdvertisementDto,
  CreateContactDto,
  LoginDto,
  Object,
  UpdateAdvertisementDto,
  UploadControllerUploadFileBody,
  UserRegisterDto,
} from './model'

import { customInstance } from '../shared/lib/axios/customAxios'
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

export const appControllerGetHello = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>({ url: `/`, method: 'GET', signal }, options)
}

export const getAppControllerGetHelloQueryKey = () => {
  return [`/`] as const
}

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof appControllerGetHello>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>
export type AppControllerGetHelloQueryError = unknown

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAppControllerGetHello<
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof appControllerGetHello>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create advertisement
 */
export const advertiseControllerCreate = (
  createAdvertisementDto: CreateAdvertisementDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/ads`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAdvertisementDto,
      signal,
    },
    options
  )
}

export const getAdvertiseControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerCreate>>,
    TError,
    { data: CreateAdvertisementDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerCreate>>,
  TError,
  { data: CreateAdvertisementDto },
  TContext
> => {
  const mutationKey = ['advertiseControllerCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerCreate>>,
    { data: CreateAdvertisementDto }
  > = props => {
    const { data } = props ?? {}

    return advertiseControllerCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerCreate>>
>
export type AdvertiseControllerCreateMutationBody = CreateAdvertisementDto
export type AdvertiseControllerCreateMutationError = unknown

/**
 * @summary Create advertisement
 */
export const useAdvertiseControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerCreate>>,
      TError,
      { data: CreateAdvertisementDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerCreate>>,
  TError,
  { data: CreateAdvertisementDto },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/ads/all`, method: 'GET', signal },
    options
  )
}

export const getAdvertiseControllerFindAllQueryKey = () => {
  return [`/ads/all`] as const
}

export const getAdvertiseControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof advertiseControllerFindAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAdvertiseControllerFindAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAll>>
  > = ({ signal }) => advertiseControllerFindAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdvertiseControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAll>>
>
export type AdvertiseControllerFindAllQueryError = unknown

export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdvertiseControllerFindAll<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdvertiseControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const advertiseControllerFindAllofMyAds = (
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/ads/my`, method: 'GET', params, signal },
    options
  )
}

export const getAdvertiseControllerFindAllofMyAdsQueryKey = (
  params: AdvertiseControllerFindAllofMyAdsParams
) => {
  return [`/ads/my`, ...(params ? [params] : [])] as const
}

export const getAdvertiseControllerFindAllofMyAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = unknown,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAdvertiseControllerFindAllofMyAdsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
  > = ({ signal }) =>
    advertiseControllerFindAllofMyAds(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdvertiseControllerFindAllofMyAdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
>
export type AdvertiseControllerFindAllofMyAdsQueryError = unknown

export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = unknown,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = unknown,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = unknown,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdvertiseControllerFindAllofMyAds<
  TData = Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
  TError = unknown,
>(
  params: AdvertiseControllerFindAllofMyAdsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindAllofMyAds>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdvertiseControllerFindAllofMyAdsQueryOptions(
    params,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const advertiseControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/ads/id/${id}`, method: 'GET', signal },
    options
  )
}

export const getAdvertiseControllerFindOneQueryKey = (id: string) => {
  return [`/ads/id/${id}`] as const
}

export const getAdvertiseControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAdvertiseControllerFindOneQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindOne>>
  > = ({ signal }) => advertiseControllerFindOne(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdvertiseControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindOne>>
>
export type AdvertiseControllerFindOneQueryError = unknown

export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdvertiseControllerFindOne<
  TData = Awaited<ReturnType<typeof advertiseControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdvertiseControllerFindOneQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const advertiseControllerFindRandom = (
  count: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/ads/random/${count}`, method: 'GET', signal },
    options
  )
}

export const getAdvertiseControllerFindRandomQueryKey = (count: string) => {
  return [`/ads/random/${count}`] as const
}

export const getAdvertiseControllerFindRandomQueryOptions = <
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = unknown,
>(
  count: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAdvertiseControllerFindRandomQueryKey(count)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof advertiseControllerFindRandom>>
  > = ({ signal }) =>
    advertiseControllerFindRandom(count, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!count,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdvertiseControllerFindRandomQueryResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerFindRandom>>
>
export type AdvertiseControllerFindRandomQueryError = unknown

export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = unknown,
>(
  count: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = unknown,
>(
  count: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
          TError,
          Awaited<ReturnType<typeof advertiseControllerFindRandom>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = unknown,
>(
  count: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdvertiseControllerFindRandom<
  TData = Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
  TError = unknown,
>(
  count: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof advertiseControllerFindRandom>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdvertiseControllerFindRandomQueryOptions(
    count,
    options
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const advertiseControllerExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/extend/date/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerExtendMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerExtend>>
>

export type AdvertiseControllerExtendMutationError = unknown

export const useAdvertiseControllerExtend = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerExtendCount = (
  id: string,
  count: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/extend/count/${id}/${count}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerExtendCountMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
    TError,
    { id: string; count: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
  TError,
  { id: string; count: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerExtendCount']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
    { id: string; count: string }
  > = props => {
    const { id, count } = props ?? {}

    return advertiseControllerExtendCount(id, count, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerExtendCountMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerExtendCount>>
>

export type AdvertiseControllerExtendCountMutationError = unknown

export const useAdvertiseControllerExtendCount = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
      TError,
      { id: string; count: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerExtendCount>>,
  TError,
  { id: string; count: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerExtendCountMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/ads/${id}`, method: 'DELETE' }, options)
}

export const getAdvertiseControllerRemoveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRemove>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRemove']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRemove>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRemove(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRemove>>
>

export type AdvertiseControllerRemoveMutationError = unknown

export const useAdvertiseControllerRemove = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRemove>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerRemoveMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerApprove = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/approve/registration/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerApproveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApprove>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApprove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerApprove']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApprove>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerApprove(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApprove>>
>

export type AdvertiseControllerApproveMutationError = unknown

export const useAdvertiseControllerApprove = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApprove>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApprove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerApproveMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerReject = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/reject/registration/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRejectMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerReject>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerReject>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerReject']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerReject>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerReject(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerReject>>
>

export type AdvertiseControllerRejectMutationError = unknown

export const useAdvertiseControllerReject = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerReject>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerReject>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdvertiseControllerRejectMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary Request date extension approval for advertisement
 */
export const advertiseControllerRequestDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/request-date-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRequestDateExtendMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRequestDateExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRequestDateExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRequestDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>
>

export type AdvertiseControllerRequestDateExtendMutationError = unknown

/**
 * @summary Request date extension approval for advertisement
 */
export const useAdvertiseControllerRequestDateExtend = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestDateExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary Request count extension approval for advertisement
 */
export const advertiseControllerRequestCountExtend = (
  id: string,
  count: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/request-count-extend/${id}/${count}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRequestCountExtendMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
    TError,
    { id: string; count: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
  TError,
  { id: string; count: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRequestCountExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
    { id: string; count: string }
  > = props => {
    const { id, count } = props ?? {}

    return advertiseControllerRequestCountExtend(id, count, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRequestCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>
>

export type AdvertiseControllerRequestCountExtendMutationError = unknown

/**
 * @summary Request count extension approval for advertisement
 */
export const useAdvertiseControllerRequestCountExtend = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
      TError,
      { id: string; count: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestCountExtend>>,
  TError,
  { id: string; count: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestCountExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerApproveDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/approve-date-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerApproveDateExtendMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerApproveDateExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerApproveDateExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerApproveDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>
>

export type AdvertiseControllerApproveDateExtendMutationError = unknown

export const useAdvertiseControllerApproveDateExtend = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveDateExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerApproveCountExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/approve-count-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerApproveCountExtendMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerApproveCountExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerApproveCountExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerApproveCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>
>

export type AdvertiseControllerApproveCountExtendMutationError = unknown

export const useAdvertiseControllerApproveCountExtend = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveCountExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerRejectDateExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/reject-date-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRejectDateExtendMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRejectDateExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRejectDateExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRejectDateExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>
>

export type AdvertiseControllerRejectDateExtendMutationError = unknown

export const useAdvertiseControllerRejectDateExtend = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectDateExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectDateExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerRejectCountExtend = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/reject-count-extend/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRejectCountExtendMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRejectCountExtend']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRejectCountExtend(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRejectCountExtendMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>
>

export type AdvertiseControllerRejectCountExtendMutationError = unknown

export const useAdvertiseControllerRejectCountExtend = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectCountExtend>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectCountExtendMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary Request update approval for advertisement
 */
export const advertiseControllerRequestUpdate = (
  id: string,
  updateAdvertisementDto: UpdateAdvertisementDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/ads/request-update/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateAdvertisementDto,
    },
    options
  )
}

export const getAdvertiseControllerRequestUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
    TError,
    { id: string; data: UpdateAdvertisementDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
  TError,
  { id: string; data: UpdateAdvertisementDto },
  TContext
> => {
  const mutationKey = ['advertiseControllerRequestUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
    { id: string; data: UpdateAdvertisementDto }
  > = props => {
    const { id, data } = props ?? {}

    return advertiseControllerRequestUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRequestUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>
>
export type AdvertiseControllerRequestUpdateMutationBody =
  UpdateAdvertisementDto
export type AdvertiseControllerRequestUpdateMutationError = unknown

/**
 * @summary Request update approval for advertisement
 */
export const useAdvertiseControllerRequestUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
      TError,
      { id: string; data: UpdateAdvertisementDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRequestUpdate>>,
  TError,
  { id: string; data: UpdateAdvertisementDto },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRequestUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerApproveUpdate = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/approve-update/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerApproveUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerApproveUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerApproveUpdate(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerApproveUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>
>

export type AdvertiseControllerApproveUpdateMutationError = unknown

export const useAdvertiseControllerApproveUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerApproveUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerApproveUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const advertiseControllerRejectUpdate = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/ads/reject-update/${id}`, method: 'PATCH' },
    options
  )
}

export const getAdvertiseControllerRejectUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['advertiseControllerRejectUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return advertiseControllerRejectUpdate(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdvertiseControllerRejectUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>
>

export type AdvertiseControllerRejectUpdateMutationError = unknown

export const useAdvertiseControllerRejectUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof advertiseControllerRejectUpdate>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAdvertiseControllerRejectUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Î°úÍ∑∏Ïù∏
 * @summary Login
 */
export const authControllerLogin = (
  loginDto: LoginDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: loginDto,
      signal,
    },
    options
  )
}

export const getAuthControllerLoginMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ['authControllerLogin']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginDto }
  > = props => {
    const { data } = props ?? {}

    return authControllerLogin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>
export type AuthControllerLoginMutationBody = LoginDto
export type AuthControllerLoginMutationError = void

/**
 * @summary Login
 */
export const useAuthControllerLogin = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogin>>,
      TError,
      { data: LoginDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * ÌöåÏõêÍ∞ÄÏûÖ
 * @summary Register
 */
export const authControllerRegister = (
  userRegisterDto: UserRegisterDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/auth/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: userRegisterDto,
      signal,
    },
    options
  )
}

export const getAuthControllerRegisterMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: UserRegisterDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: UserRegisterDto },
  TContext
> => {
  const mutationKey = ['authControllerRegister']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: UserRegisterDto }
  > = props => {
    const { data } = props ?? {}

    return authControllerRegister(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>
export type AuthControllerRegisterMutationBody = UserRegisterDto
export type AuthControllerRegisterMutationError = void

/**
 * @summary Register
 */
export const useAuthControllerRegister = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRegister>>,
      TError,
      { data: UserRegisterDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: UserRegisterDto },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const authControllerLogout = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/auth/logout`, method: 'POST', signal },
    options
  )
}

export const getAuthControllerLogoutMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogout>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['authControllerLogout']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogout>>,
    void
  > = () => {
    return authControllerLogout(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AuthControllerLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogout>>
>

export type AuthControllerLogoutMutationError = unknown

export const useAuthControllerLogout = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogout>>,
      TError,
      void,
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getAuthControllerLogoutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary Refresh token
 */
export const authControllerRefresh = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/auth/refresh`, method: 'GET', signal },
    options
  )
}

export const getAuthControllerRefreshQueryKey = () => {
  return [`/auth/refresh`] as const
}

export const getAuthControllerRefreshQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerRefresh>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAuthControllerRefreshQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerRefresh>>
  > = ({ signal }) => authControllerRefresh(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthControllerRefreshQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefresh>>
>
export type AuthControllerRefreshQueryError = void

export function useAuthControllerRefresh<
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerRefresh>>,
          TError,
          Awaited<ReturnType<typeof authControllerRefresh>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAuthControllerRefresh<
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerRefresh>>,
          TError,
          Awaited<ReturnType<typeof authControllerRefresh>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAuthControllerRefresh<
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Refresh token
 */

export function useAuthControllerRefresh<
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAuthControllerRefreshQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÏãúÏä§ÌÖúÏùò Î™®Îì† ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Î™®Îì† ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */
export const userControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>({ url: `/user`, method: 'GET', signal }, options)
}

export const getUserControllerFindAllQueryKey = () => {
  return [`/user`] as const
}

export const getUserControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerFindAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserControllerFindAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerFindAll>>
  > = ({ signal }) => userControllerFindAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindAll>>
>
export type UserControllerFindAllQueryError = unknown

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof userControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Î™®Îì† ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */

export function useUserControllerFindAll<
  TData = Awaited<ReturnType<typeof userControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUserControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Î∏îÎûôÎ¶¨Ïä§Ìä∏Ïóê Îì±Î°ùÎêú ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Î∏îÎûôÎ¶¨Ïä§Ìä∏ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */
export const userControllerBlacklist = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/user/blacklist`, method: 'GET', signal },
    options
  )
}

export const getUserControllerBlacklistQueryKey = () => {
  return [`/user/blacklist`] as const
}

export const getUserControllerBlacklistQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerBlacklist>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerBlacklistQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerBlacklist>>
  > = ({ signal }) => userControllerBlacklist(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerBlacklist>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserControllerBlacklistQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerBlacklist>>
>
export type UserControllerBlacklistQueryError = unknown

export function useUserControllerBlacklist<
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerBlacklist>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerBlacklist>>,
          TError,
          Awaited<ReturnType<typeof userControllerBlacklist>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerBlacklist<
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerBlacklist>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerBlacklist>>,
          TError,
          Awaited<ReturnType<typeof userControllerBlacklist>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerBlacklist<
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerBlacklist>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Î∏îÎûôÎ¶¨Ïä§Ìä∏ ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */

export function useUserControllerBlacklist<
  TData = Awaited<ReturnType<typeof userControllerBlacklist>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerBlacklist>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUserControllerBlacklistQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÌòÑÏû¨ ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉúÏù∏ ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÎπÑÌôúÏÑ±ÌôîÎêú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */
export const userControllerDeactive = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/user/deactive`, method: 'GET', signal },
    options
  )
}

export const getUserControllerDeactiveQueryKey = () => {
  return [`/user/deactive`] as const
}

export const getUserControllerDeactiveQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerDeactive>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserControllerDeactiveQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerDeactive>>
  > = ({ signal }) => userControllerDeactive(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerDeactive>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserControllerDeactiveQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerDeactive>>
>
export type UserControllerDeactiveQueryError = unknown

export function useUserControllerDeactive<
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerDeactive>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerDeactive>>,
          TError,
          Awaited<ReturnType<typeof userControllerDeactive>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerDeactive<
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerDeactive>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerDeactive>>,
          TError,
          Awaited<ReturnType<typeof userControllerDeactive>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerDeactive<
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerDeactive>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary ÎπÑÌôúÏÑ±ÌôîÎêú ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */

export function useUserControllerDeactive<
  TData = Awaited<ReturnType<typeof userControllerDeactive>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerDeactive>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUserControllerDeactiveQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÎ•º Î∏îÎûôÎ¶¨Ïä§Ìä∏Ïóê Îì±Î°ùÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê Î∏îÎûôÎ¶¨Ïä§Ìä∏ Îì±Î°ù
 */
export const userControllerBlack = (
  userControllerBlackBody: Object,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/user/black`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: userControllerBlackBody,
      signal,
    },
    options
  )
}

export const getUserControllerBlackMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerBlack>>,
    TError,
    { data: Object },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerBlack>>,
  TError,
  { data: Object },
  TContext
> => {
  const mutationKey = ['userControllerBlack']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerBlack>>,
    { data: Object }
  > = props => {
    const { data } = props ?? {}

    return userControllerBlack(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UserControllerBlackMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerBlack>>
>
export type UserControllerBlackMutationBody = Object
export type UserControllerBlackMutationError = unknown

/**
 * @summary ÏÇ¨Ïö©Ïûê Î∏îÎûôÎ¶¨Ïä§Ìä∏ Îì±Î°ù
 */
export const useUserControllerBlack = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerBlack>>,
      TError,
      { data: Object },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerBlack>>,
  TError,
  { data: Object },
  TContext
> => {
  const mutationOptions = getUserControllerBlackMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Î∏îÎûôÎ¶¨Ïä§Ìä∏ÏóêÏÑú ÏÇ¨Ïö©ÏûêÎ•º Ï†úÏô∏Ìï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê Î∏îÎûôÎ¶¨Ïä§Ìä∏ Ìï¥Ï†ú
 */
export const userControllerPardon = (
  userControllerPardonBody: Object,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/user/pardon`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: userControllerPardonBody,
      signal,
    },
    options
  )
}

export const getUserControllerPardonMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerPardon>>,
    TError,
    { data: Object },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerPardon>>,
  TError,
  { data: Object },
  TContext
> => {
  const mutationKey = ['userControllerPardon']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerPardon>>,
    { data: Object }
  > = props => {
    const { data } = props ?? {}

    return userControllerPardon(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UserControllerPardonMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerPardon>>
>
export type UserControllerPardonMutationBody = Object
export type UserControllerPardonMutationError = unknown

/**
 * @summary ÏÇ¨Ïö©Ïûê Î∏îÎûôÎ¶¨Ïä§Ìä∏ Ìï¥Ï†ú
 */
export const useUserControllerPardon = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerPardon>>,
      TError,
      { data: Object },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerPardon>>,
  TError,
  { data: Object },
  TContext
> => {
  const mutationOptions = getUserControllerPardonMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * ÎπÑÌôúÏÑ±ÌôîÎêú ÏÇ¨Ïö©ÏûêÎ•º ÌôúÏÑ±Ìôî ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÌôúÎèô ÌóàÍ∞Ä
 */
export const userControllerActive = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/user/active/${id}`, method: 'POST', signal },
    options
  )
}

export const getUserControllerActiveMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerActive>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerActive>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['userControllerActive']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerActive>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return userControllerActive(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UserControllerActiveMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerActive>>
>

export type UserControllerActiveMutationError = unknown

/**
 * @summary ÏÇ¨Ïö©Ïûê ÌôúÎèô ÌóàÍ∞Ä
 */
export const useUserControllerActive = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerActive>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerActive>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUserControllerActiveMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * ÌôúÎèô ÌóàÍ∞ÄÎêú ÏÇ¨Ïö©ÏûêÎ•º ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÌôúÎèô ÎπÑÌôúÏÑ±Ìôî
 */
export const userControllerDeactiveUser = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/user/deactive/${id}`, method: 'POST', signal },
    options
  )
}

export const getUserControllerDeactiveUserMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerDeactiveUser>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerDeactiveUser>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['userControllerDeactiveUser']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerDeactiveUser>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return userControllerDeactiveUser(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UserControllerDeactiveUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerDeactiveUser>>
>

export type UserControllerDeactiveUserMutationError = unknown

/**
 * @summary ÏÇ¨Ïö©Ïûê ÌôúÎèô ÎπÑÌôúÏÑ±Ìôî
 */
export const useUserControllerDeactiveUser = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerDeactiveUser>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerDeactiveUser>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUserControllerDeactiveUserMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */
export const userControllerProfile = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/user/profile`, method: 'GET', signal },
    options
  )
}

export const getUserControllerProfileQueryKey = () => {
  return [`/user/profile`] as const
}

export const getUserControllerProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerProfile>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserControllerProfileQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerProfile>>
  > = ({ signal }) => userControllerProfile(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerProfile>>
>
export type UserControllerProfileQueryError = unknown

export function useUserControllerProfile<
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof userControllerProfile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerProfile<
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof userControllerProfile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerProfile<
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */

export function useUserControllerProfile<
  TData = Awaited<ReturnType<typeof userControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUserControllerProfileQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */
export const userControllerProfileById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/user/profile/${id}`, method: 'GET', signal },
    options
  )
}

export const getUserControllerProfileByIdQueryKey = (id: string) => {
  return [`/user/profile/${id}`] as const
}

export const getUserControllerProfileByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerProfileByIdQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerProfileById>>
  > = ({ signal }) => userControllerProfileById(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerProfileById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type UserControllerProfileByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerProfileById>>
>
export type UserControllerProfileByIdQueryError = unknown

export function useUserControllerProfileById<
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerProfileById>>,
          TError,
          Awaited<ReturnType<typeof userControllerProfileById>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerProfileById<
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerProfileById>>,
          TError,
          Awaited<ReturnType<typeof userControllerProfileById>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useUserControllerProfileById<
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */

export function useUserControllerProfileById<
  TData = Awaited<ReturnType<typeof userControllerProfileById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerProfileById>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getUserControllerProfileByIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÌäπÏ†ï ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÏÇ≠Ï†ú
 */
export const userControllerDeleteProfile = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/user/${id}`, method: 'DELETE' }, options)
}

export const getUserControllerDeleteProfileMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerDeleteProfile>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerDeleteProfile>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['userControllerDeleteProfile']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerDeleteProfile>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return userControllerDeleteProfile(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UserControllerDeleteProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerDeleteProfile>>
>

export type UserControllerDeleteProfileMutationError = unknown

/**
 * @summary ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ ÏÇ≠Ï†ú
 */
export const useUserControllerDeleteProfile = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerDeleteProfile>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerDeleteProfile>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUserControllerDeleteProfileMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const companyControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/company`, method: 'GET', signal },
    options
  )
}

export const getCompanyControllerFindAllQueryKey = () => {
  return [`/company`] as const
}

export const getCompanyControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof companyControllerFindAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getCompanyControllerFindAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof companyControllerFindAll>>
  > = ({ signal }) => companyControllerFindAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof companyControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompanyControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerFindAll>>
>
export type CompanyControllerFindAllQueryError = unknown

export function useCompanyControllerFindAll<
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof companyControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCompanyControllerFindAll<
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof companyControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCompanyControllerFindAll<
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useCompanyControllerFindAll<
  TData = Awaited<ReturnType<typeof companyControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCompanyControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const companyControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/company/${id}`, method: 'GET', signal },
    options
  )
}

export const getCompanyControllerFindOneQueryKey = (id: string) => {
  return [`/company/${id}`] as const
}

export const getCompanyControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getCompanyControllerFindOneQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof companyControllerFindOne>>
  > = ({ signal }) => companyControllerFindOne(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof companyControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CompanyControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerFindOne>>
>
export type CompanyControllerFindOneQueryError = unknown

export function useCompanyControllerFindOne<
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof companyControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCompanyControllerFindOne<
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof companyControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof companyControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useCompanyControllerFindOne<
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useCompanyControllerFindOne<
  TData = Awaited<ReturnType<typeof companyControllerFindOne>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof companyControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getCompanyControllerFindOneQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const companyControllerUpdate = (
  id: string,
  companyCreateDto: CompanyCreateDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/company/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: companyCreateDto,
    },
    options
  )
}

export const getCompanyControllerUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof companyControllerUpdate>>,
    TError,
    { id: string; data: CompanyCreateDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof companyControllerUpdate>>,
  TError,
  { id: string; data: CompanyCreateDto },
  TContext
> => {
  const mutationKey = ['companyControllerUpdate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof companyControllerUpdate>>,
    { id: string; data: CompanyCreateDto }
  > = props => {
    const { id, data } = props ?? {}

    return companyControllerUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CompanyControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof companyControllerUpdate>>
>
export type CompanyControllerUpdateMutationBody = CompanyCreateDto
export type CompanyControllerUpdateMutationError = unknown

export const useCompanyControllerUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof companyControllerUpdate>>,
      TError,
      { id: string; data: CompanyCreateDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof companyControllerUpdate>>,
  TError,
  { id: string; data: CompanyCreateDto },
  TContext
> => {
  const mutationOptions = getCompanyControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const adminControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>({ url: `/admin`, method: 'GET', signal }, options)
}

export const getAdminControllerFindAllQueryKey = () => {
  return [`/admin`] as const
}

export const getAdminControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adminControllerFindAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminControllerFindAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminControllerFindAll>>
  > = ({ signal }) => adminControllerFindAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdminControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerFindAll>>
>
export type AdminControllerFindAllQueryError = unknown

export function useAdminControllerFindAll<
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof adminControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdminControllerFindAll<
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof adminControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdminControllerFindAll<
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdminControllerFindAll<
  TData = Awaited<ReturnType<typeof adminControllerFindAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdminControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const adminControllerCreate = (
  adminAccountCreateDto: AdminAccountCreateDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/admin/create`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: adminAccountCreateDto,
      signal,
    },
    options
  )
}

export const getAdminControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerCreate>>,
    TError,
    { data: AdminAccountCreateDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerCreate>>,
  TError,
  { data: AdminAccountCreateDto },
  TContext
> => {
  const mutationKey = ['adminControllerCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerCreate>>,
    { data: AdminAccountCreateDto }
  > = props => {
    const { data } = props ?? {}

    return adminControllerCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdminControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerCreate>>
>
export type AdminControllerCreateMutationBody = AdminAccountCreateDto
export type AdminControllerCreateMutationError = unknown

export const useAdminControllerCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerCreate>>,
      TError,
      { data: AdminAccountCreateDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerCreate>>,
  TError,
  { data: AdminAccountCreateDto },
  TContext
> => {
  const mutationOptions = getAdminControllerCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const adminControllerDelete = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/admin/${id}`, method: 'DELETE' },
    options
  )
}

export const getAdminControllerDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerDelete>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['adminControllerDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerDelete>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return adminControllerDelete(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdminControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerDelete>>
>

export type AdminControllerDeleteMutationError = unknown

export const useAdminControllerDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerDelete>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAdminControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const adminControllerCreateSuperAdmin = (
  adminAccountCreateDto: AdminAccountCreateDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/admin/create/super`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: adminAccountCreateDto,
      signal,
    },
    options
  )
}

export const getAdminControllerCreateSuperAdminMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
    TError,
    { data: AdminAccountCreateDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
  TError,
  { data: AdminAccountCreateDto },
  TContext
> => {
  const mutationKey = ['adminControllerCreateSuperAdmin']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
    { data: AdminAccountCreateDto }
  > = props => {
    const { data } = props ?? {}

    return adminControllerCreateSuperAdmin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdminControllerCreateSuperAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>
>
export type AdminControllerCreateSuperAdminMutationBody = AdminAccountCreateDto
export type AdminControllerCreateSuperAdminMutationError = unknown

export const useAdminControllerCreateSuperAdmin = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
      TError,
      { data: AdminAccountCreateDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerCreateSuperAdmin>>,
  TError,
  { data: AdminAccountCreateDto },
  TContext
> => {
  const mutationOptions =
    getAdminControllerCreateSuperAdminMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const adminControllerLogin = (
  adminLoginDto: AdminLoginDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/admin/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: adminLoginDto,
      signal,
    },
    options
  )
}

export const getAdminControllerLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminControllerLogin>>,
    TError,
    { data: AdminLoginDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminControllerLogin>>,
  TError,
  { data: AdminLoginDto },
  TContext
> => {
  const mutationKey = ['adminControllerLogin']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminControllerLogin>>,
    { data: AdminLoginDto }
  > = props => {
    const { data } = props ?? {}

    return adminControllerLogin(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AdminControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerLogin>>
>
export type AdminControllerLoginMutationBody = AdminLoginDto
export type AdminControllerLoginMutationError = unknown

export const useAdminControllerLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminControllerLogin>>,
      TError,
      { data: AdminLoginDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof adminControllerLogin>>,
  TError,
  { data: AdminLoginDto },
  TContext
> => {
  const mutationOptions = getAdminControllerLoginMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

export const adminControllerRefresh = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/admin/refresh`, method: 'GET', signal },
    options
  )
}

export const getAdminControllerRefreshQueryKey = () => {
  return [`/admin/refresh`] as const
}

export const getAdminControllerRefreshQueryOptions = <
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adminControllerRefresh>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminControllerRefreshQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminControllerRefresh>>
  > = ({ signal }) => adminControllerRefresh(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminControllerRefresh>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdminControllerRefreshQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerRefresh>>
>
export type AdminControllerRefreshQueryError = unknown

export function useAdminControllerRefresh<
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerRefresh>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerRefresh>>,
          TError,
          Awaited<ReturnType<typeof adminControllerRefresh>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdminControllerRefresh<
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerRefresh>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerRefresh>>,
          TError,
          Awaited<ReturnType<typeof adminControllerRefresh>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdminControllerRefresh<
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerRefresh>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdminControllerRefresh<
  TData = Awaited<ReturnType<typeof adminControllerRefresh>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerRefresh>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdminControllerRefreshQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const adminControllerProfile = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/admin/profile`, method: 'GET', signal },
    options
  )
}

export const getAdminControllerProfileQueryKey = () => {
  return [`/admin/profile`] as const
}

export const getAdminControllerProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof adminControllerProfile>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminControllerProfileQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminControllerProfile>>
  > = ({ signal }) => adminControllerProfile(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof adminControllerProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AdminControllerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminControllerProfile>>
>
export type AdminControllerProfileQueryError = unknown

export function useAdminControllerProfile<
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof adminControllerProfile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdminControllerProfile<
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminControllerProfile>>,
          TError,
          Awaited<ReturnType<typeof adminControllerProfile>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAdminControllerProfile<
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerProfile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useAdminControllerProfile<
  TData = Awaited<ReturnType<typeof adminControllerProfile>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminControllerProfile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAdminControllerProfileQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const uploadControllerUploadFile = (
  uploadControllerUploadFileBody: UploadControllerUploadFileBody,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  const formData = new FormData()
  if (uploadControllerUploadFileBody.file !== undefined) {
    formData.append(`file`, uploadControllerUploadFileBody.file)
  }

  return customInstance<void>(
    {
      url: `/upload/file`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options
  )
}

export const getUploadControllerUploadFileMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadControllerUploadFile>>,
    TError,
    { data: UploadControllerUploadFileBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadControllerUploadFile>>,
  TError,
  { data: UploadControllerUploadFileBody },
  TContext
> => {
  const mutationKey = ['uploadControllerUploadFile']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadControllerUploadFile>>,
    { data: UploadControllerUploadFileBody }
  > = props => {
    const { data } = props ?? {}

    return uploadControllerUploadFile(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UploadControllerUploadFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadControllerUploadFile>>
>
export type UploadControllerUploadFileMutationBody =
  UploadControllerUploadFileBody
export type UploadControllerUploadFileMutationError = void

export const useUploadControllerUploadFile = <
  TError = void,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadControllerUploadFile>>,
      TError,
      { data: UploadControllerUploadFileBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof uploadControllerUploadFile>>,
  TError,
  { data: UploadControllerUploadFileBody },
  TContext
> => {
  const mutationOptions = getUploadControllerUploadFileMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary ÎåÄÏ∂ú Î¨∏Ïùò Îì±Î°ù
 */
export const contactControllerCreate = (
  createContactDto: CreateContactDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    {
      url: `/contact`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createContactDto,
      signal,
    },
    options
  )
}

export const getContactControllerCreateMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof contactControllerCreate>>,
    TError,
    { data: CreateContactDto },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof contactControllerCreate>>,
  TError,
  { data: CreateContactDto },
  TContext
> => {
  const mutationKey = ['contactControllerCreate']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof contactControllerCreate>>,
    { data: CreateContactDto }
  > = props => {
    const { data } = props ?? {}

    return contactControllerCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ContactControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof contactControllerCreate>>
>
export type ContactControllerCreateMutationBody = CreateContactDto
export type ContactControllerCreateMutationError = void

/**
 * @summary ÎåÄÏ∂ú Î¨∏Ïùò Îì±Î°ù
 */
export const useContactControllerCreate = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof contactControllerCreate>>,
      TError,
      { data: CreateContactDto },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof contactControllerCreate>>,
  TError,
  { data: CreateContactDto },
  TContext
> => {
  const mutationOptions = getContactControllerCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * @summary ÎåÄÏ∂ú Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå
 */
export const contactControllerFindAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/contact`, method: 'GET', signal },
    options
  )
}

export const getContactControllerFindAllQueryKey = () => {
  return [`/contact`] as const
}

export const getContactControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof contactControllerFindAll>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof contactControllerFindAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getContactControllerFindAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof contactControllerFindAll>>
  > = ({ signal }) => contactControllerFindAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof contactControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ContactControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof contactControllerFindAll>>
>
export type ContactControllerFindAllQueryError = void

export function useContactControllerFindAll<
  TData = Awaited<ReturnType<typeof contactControllerFindAll>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contactControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof contactControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useContactControllerFindAll<
  TData = Awaited<ReturnType<typeof contactControllerFindAll>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contactControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof contactControllerFindAll>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useContactControllerFindAll<
  TData = Awaited<ReturnType<typeof contactControllerFindAll>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary ÎåÄÏ∂ú Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå
 */

export function useContactControllerFindAll<
  TData = Awaited<ReturnType<typeof contactControllerFindAll>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getContactControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÎåÄÏ∂ú Î¨∏Ïùò ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const contactControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<void>(
    { url: `/contact/${id}`, method: 'GET', signal },
    options
  )
}

export const getContactControllerFindOneQueryKey = (id: string) => {
  return [`/contact/${id}`] as const
}

export const getContactControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof contactControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getContactControllerFindOneQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof contactControllerFindOne>>
  > = ({ signal }) => contactControllerFindOne(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof contactControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ContactControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof contactControllerFindOne>>
>
export type ContactControllerFindOneQueryError = void

export function useContactControllerFindOne<
  TData = Awaited<ReturnType<typeof contactControllerFindOne>>,
  TError = void,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof contactControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof contactControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useContactControllerFindOne<
  TData = Awaited<ReturnType<typeof contactControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof contactControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof contactControllerFindOne>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useContactControllerFindOne<
  TData = Awaited<ReturnType<typeof contactControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary ÎåÄÏ∂ú Î¨∏Ïùò ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useContactControllerFindOne<
  TData = Awaited<ReturnType<typeof contactControllerFindOne>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof contactControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getContactControllerFindOneQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary ÎåÄÏ∂ú Î¨∏Ïùò ÏÇ≠Ï†ú
 */
export const contactControllerDelete = (
  id: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/contact/${id}`, method: 'DELETE' },
    options
  )
}

export const getContactControllerDeleteMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof contactControllerDelete>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof contactControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['contactControllerDelete']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof contactControllerDelete>>,
    { id: string }
  > = props => {
    const { id } = props ?? {}

    return contactControllerDelete(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ContactControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof contactControllerDelete>>
>

export type ContactControllerDeleteMutationError = void

/**
 * @summary ÎåÄÏ∂ú Î¨∏Ïùò ÏÇ≠Ï†ú
 */
export const useContactControllerDelete = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof contactControllerDelete>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof contactControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getContactControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
